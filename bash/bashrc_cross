# mix up of differents bashrc
# aur: https://aur.archlinux.org/packages/gentoo-bashrc/

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# check if we have to do a first configuration
if [ ! -f $HOME/.genbox-config-done ] && [ -x /usr/sbin/genbox-config ]; then
	/usr/sbin/genbox-config $HOME
	if [ $? -eq 0 ]; then
		touch $HOME/.genbox-config-done
	fi	
fi

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

# Change the window title of X terminals 
case ${TERM} in
	xterm*|rxvt*|Eterm|aterm|kterm|gnome*|interix)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'
		;;
	screen)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\033\\"'
		;;
esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
	else
		PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

# Try to keep environment pollution down, EPA loves us.
unset use_color safe_term match_lhs


# ?

if [ -d $HOME/.genbox ]; then
	for files in $HOME/.genbox/*; do
		. $files
	done
fi

# druff
#PS1='\[\e[01;33m\][\h] \[\e[01;31m\]genbox\[\e[01;34m\] \W\[\033[0m\]$(ps1_end) \$\[\e[00m\] '
if [[ ${EUID} == 0 ]] ; then
	PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W\[\033[00m\] ($(ps1_end2)) \[\033[01;34m\]\$\[\033[00m\] '
else
	PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\] ($(ps1_end2)) \[\033[01;34m\] \$\[\033[00m\] '
fi

genbox_version() {
	local version=$(list genbox-config | cut -d "-" -f 4 | cut -d "." -f 1)
	echo -n $version
}

export TARGETS=("" "")
curr_target() {
	readlink /usr/targets/current
}
echo $PROMPT_COMMAND | grep TARGETS >/dev/null \
	|| PROMPT_COMMAND="TARGETS=(\$(curr_target) \${TARGETS[0]}); ${PROMPT_COMMAND}"

ps1_end() {
	[ -n "${TARGETS[1]}" ] && [ "${TARGETS[0]}" != "${TARGETS[1]}" ] && changed=1
	local red="\e[1;31m"
	local no="\e[0m"
	[ "${changed}" = 1 ] && echo -en $red
	echo -n "${TARGETS[0]}"
	[ "${changed}" = 1 ] && echo -en $no
}

ps1_end2() {
	#local package="$(xtarget --get-package | cut -f2 -d '/')"
	#local version="$(xtarget --get-version)"
	local current="/usr/targets/current/root/etc/prebuilt-release"
	local prebuilt=""
	if [ -f ${current} ]; then
		prebuilt="$(cut -f 2 -d '/' ${current})"
	fi
	echo -n "${prebuilt}"
}

#------------------------------------------------------------

x_find() {
	#echo x_find
	#set -x
	pattern="$1"
	name=$(xexec equery -q l "$pattern" | head -n 1)

	if [ "$name" != "" ] && ! [[ "$name" =~ '^ \* ' ]]; then
	name="=$name"
	else
	name="$pattern"
	fi

	filepath=$(xexec equery -q w "$name" 2>/dev/null | head -n 1)
	[ "$filepath" = "" ] && return 1

	[ -f "$filepath" ] || return 1
	path=$(dirname $filepath)
	[ -d "$path" ] || return 1
	filename=$(basename $filepath)
	#set +x
	return 0
}

xcd() {
	if [ "$1" = "" ]; then
		cd $(xexec portageq envvar ROOT)/..
		return 0
	fi

	x_find $1 || return 1
	cd $path || return 1
	echo $path
	echo $filename
}

xvim() {
	x_find $1 || return 1
	cd $path || return 1
	echo $path
	echo $filename
	vim $filename
}

xtra() {
	x_find $1 || return 1
	cd $path || return 1
	echo $path
	echo $filename

	local prefix_base=$(pwd)/prefix
	local prefix_n=
	local prefix="${prefix_base}${prefix_n}"
	local exists=0
	while [ -e "$prefix" ]; do
		[ "$2" = "" ] && exists=1 && echo "'$prefix' exists" && echo break && break
		[ "$2" = "" ] && exists=1 && break
		[ "$prefix_n" = "" ] && prefix_n=0
		prefix_n=$[ $prefix_n + 1 ]
		prefix="${prefix_base}${prefix_n}"
	done

	echo "prefix=${prefix}"
	echo "exists=${exists}"
	if [ "$exists" = 0 ]; then
		echo 'BUILD_PREFIX=$(pwd)/prefix' xbuild "$filename" clean setup fetch unpack
		BUILD_PREFIX="${prefix}" xbuild "$filename" clean setup fetch unpack || return 2
		#xbuild "$filename" clean setup fetch unpack || return 2
	fi
	cd ${prefix}/*/*/work/*/ || return 3
	[ "$TMUX" != "" ] && tmux rename-window "${filename%\.ebuild}"
	[ -e cscope.out ] || (cscope -Rb 2> /dev/null)
}

xl() {
	(cd /usr/targets/current/root/var/db/pkg/ && ls --color=never -d */*$1*)
}

xf() {
	grep -v "^dir " /usr/targets/current/root/var/db/pkg/*/$1-*/CONTENTS | awk '{print $2}'
}

_packages() {
	local cur prev opts base
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"

	local names=$( (
		shopt -s nullglob
		shopt -s extglob
		for i in /usr/targets/current/root/var/db/pkg/*/; do cd "$i" && echo $curr*/; done | sed 's|/||g'
		for i in /usr/targets/current/portage/*/; do cd "$i" && echo $curr*/*/; done | sed 's@\(/ \|/$\)@ @g'
		for i in /usr/targets/current/portage/*/*/; do cd "$i" && echo $curr*/; done | sed 's|/||g'
	) )
	#names=( "${names[@]} ${names2[@]} $(xl)" )
	#names=( "${names[@]}" )
	COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )

	return 0;
}

_targets1() {
	local cur prev prev2 opts base names targetbase keyword
	local targetdir=/usr/local/portage/targets/product-targets/
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"

	case "${COMP_CWORD}" in
	1)
		names=$( (
			shopt -s nullglob
			shopt -s extglob
			find $targetdir -name "$cur*.ebuild" -type f -printf "%f\n" | sed 's|\-[0-9.]*\.ebuild||g' | uniq
		) );;
	2)
		names=$( (
			shopt -s nullglob
			shopt -s extglob
			prev="${COMP_WORDS[COMP_CWORD-1]}"
			find $targetdir/$prev/ -name "$prev-$cur*.ebuild" -type f -printf "%f\n" | sed 's|\.ebuild||g' | rev | cut -d "-" -f 1 | rev
		) );;
	3)
		names=$( (
			shopt -s nullglob
			shopt -s extglob
			prev="${COMP_WORDS[COMP_CWORD-1]}"
			prev2="${COMP_WORDS[COMP_CWORD-2]}"
			grep -Po '^KEYWORDS="[a-zA-Z0-9_~\n\t/ ]+"' "$targetdir/$prev2/$prev2-$prev.ebuild" 2> /dev/null | sed ':a;N;$!ba;s/\n/ /g' | cut -d "\"" -f 2
		) );;
	*)
		names=""
		;;
	esac
	COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )

	return 0
}

_targets2() {
	local cur prev prev2 opts base names archs security res
	local targetdir=/var/lib/layman/targets/product-targets/
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"

	case "${COMP_CWORD}" in
	1)
		names=$( (
			shopt -s nullglob
			shopt -s extglob
			find $targetdir -name "$cur*.ebuild" -type f -printf "%f\n" | sed 's|\-[0-9.]*\.ebuild||g' | uniq
		) );;
	2)
		names=$( (
			shopt -s nullglob
			shopt -s extglob
			prev="${COMP_WORDS[COMP_CWORD-1]}"
			find $targetdir/$prev/ -name "$prev-$cur*.ebuild" -type f -printf "%f\n" | sed 's|\.ebuild||g' | rev | cut -d "-" -f 1 | rev
		) );;
	3)
		names=$( (
			shopt -s nullglob
			shopt -s extglob
			prev="${COMP_WORDS[COMP_CWORD-1]}"
			prev2="${COMP_WORDS[COMP_CWORD-2]}"
			archs=($(grep -Po '^IUSE_WYPLAY_BOARD="[a-zA-Z0-9_~\n\t/ ]+"' "$targetdir/$prev2/$prev2-$prev.ebuild" 2> /dev/null | sed ':a;N;$!ba;s/\n/ /g' | cut -d "\"" -f 2))
			security=($(grep -Po '^IUSE_WYPLAY_SECURITY="[a-zA-Z0-9_~\n\t/ ]+"' "$targetdir/$prev2/$prev2-$prev.ebuild" 2> /dev/null | sed ':a;N;$!ba;s/\n/ /g' | cut -d "\"" -f 2))
			if [ ${#security[@]} -eq 0 ]; then
				echo "$archs"
			else
				for s in "${security[@]}"; do
					for a in "${archs[@]}"; do
						res="${s}/${a} $res"
					done
				done
				echo "$res"
			fi
		) );;
	*)
		names=""
		;;
	esac
	COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )

	return 0
}

complete -F _packages xcd
complete -F _packages xvim
complete -F _packages xtra
complete -F _packages xf
complete -F _packages xl

_xmerge() {
	COMPREPLY=()
	local cur="${COMP_WORDS[COMP_CWORD]}"
	#local prev="${COMP_WORDS[COMP_CWORD-1]}"

	#slow
	#portdir=$(xportageq envvar PORTDIR PORTDIR_OVERLAY)
	portdir=/usr/targets/current/portage/*/

	local names="$(\
		for pd in $portdir ; do \
			builtin cd ${pd}; \
			for i in *-*/${cur}*; do \
				[[ -d $i ]] && echo ${i##*/}; \
			done ; \
		done)"
	COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )

	return 0;
}

#complete -F _xmerge xmerge
complete -F _packages xmerge
complete -F _packages xlist

xrm() {
	for target in "$@"; do xtarget -d $target; done;
}

xprebuilt() {
	if [ "$#" -ne 3 ]; then return 1; fi
	local target=$1
	local version=$2
	local arch=$3
	local name=$(date +%Y%m%d-%H%M)-$target

	# arch
	# grep $targetdir/$target/$target-$version-$version.ebuild | cut -d "\"" -f 2

	local targetdir=/usr/local/portage/targets/product-targets/
	if [ ! -e $targetdir/$target/$target-$version-$version.ebuild ]; then
		xtarget --sync
	fi

	set -x
	USE="prebuilt debuginfo" xtarget --create --verbose --dir $name =product-targets/$target-$version --arch $arch
	set +x
	#env -u USE="prebuilt" xtarget --create --verbose --dir $name =product-targets/$target-$version --arch $arch
	# clean
	rm -rf /tmp/.xtarget
}
if [ $(genbox_version) == "1" ]; then complete -F _targets1 xprebuilt; else complete -F _targets2 xprebuilt; fi

xbb() {
	if [ "$#" -lt 2 ]; then return 1; fi
	local dir package ebuild category version
	package=$1
	ebuild=$(xexec equery which $package 2>/dev/null)
	category=$(basename $(dirname $(dirname $ebuild)))
	version=$(echo $ebuild | sed 's|\.ebuild||g' | rev | cut -d "-" -f 1 | rev)
	if [ $(genbox_version) == "1" ]; then dir="work"; else dir="xbuild/portage"; fi
	if [ ! -f "$ebuild" ]; then echo "no package '$package'"; return 1; fi
	shift
	set -x
	xbuild $ebuild $@
	set +x
	if [[ $@ == *"unpack"* ]]; then
		cd /usr/targets/$(curr_target)/$dir/$category/$package*/work/*/ || return 3
		[ "$TMUX" != "" ] && tmux rename-window "${package}-${version}"
		[ -e cscope.out ] || (cscope -Rb 2> /dev/null)
	fi
}
complete -F _packages xbb
